// docs/.vitepress/config.mts
import { defineConfig } from "file:///E:/vue-project/vitepress-demo/node_modules/vitepress/dist/node/index.js";

// docs/.vitepress/navs/zh-CN.nav.ts
var getZhCNNav = () => {
  return [
    {
      text: "\u4E3B\u9875",
      link: "/"
    },
    {
      text: "\u6307\u5357",
      items: [
        {
          text: "apiclound",
          link: "/zh-CN/app/apiclound.md"
        },
        {
          text: "\u4ECE\u5546",
          link: "/zh-CN/congshang/congshang.md"
        },
        {
          text: "JavaScript",
          link: "/zh-CN/javascript/shared.md"
        }
      ]
    }
  ];
};

// docs/.vitepress/navs/en-US.nav.ts
var getEnUSNav = () => {
  return [
    {
      text: "\u4E3B\u9875",
      link: "/"
    },
    {
      text: "\u524D\u7AEF",
      items: [
        {
          text: "CSS\u5B9E\u6218",
          link: "/en-US/applet-docs.md"
        },
        {
          text: "CSS\u6587\u6863",
          link: "/en-US/backend-docs.md"
        },
        {
          text: "CSS\u6587\u6863",
          link: "/en-US/front-end-docs.md"
        }
      ]
    }
  ];
};

// docs/.vitepress/sidebars/zh-CN.sidebar.ts
var getZhCNSidebar = () => {
  return {
    // "/zh-CN/docs/前端/": [
    //     {
    //         text: "CSS",
    //         collapsed: true,
    //         items: [
    //             {
    //                 text: "CSS实战",
    //                 link: "/zh-CN/applet-docs.md",
    //             },
    //             {
    //                 text: "CSS文档",
    //                 link: "/zh-CN/backend-docs.md",
    //             },
    //             {
    //                 text: "CSS文档",
    //                 link: "/zh-CN/front-end-docs.md",
    //             },
    //         ],
    //     }
    // ],
    "/zh-CN/app/": [
      {
        text: "apiclound",
        collapsed: true,
        link: "/zh-CN/app/apiclound.md"
      }
    ],
    "/zh-CN/congshang/": [
      {
        text: "congshang \u5E38\u7528",
        collapsed: true,
        items: [
          {
            text: "congshang",
            link: "/zh-CN/congshang/congshang.md"
          },
          {
            text: "inno-setup\u914D\u7F6E",
            link: "/zh-CN/congshang/inno-setup.md"
          }
        ]
      }
    ],
    "/zh-CN/git_order/": [
      {
        text: "git \u6307\u4EE4",
        collapsed: true,
        link: "/zh-CN/git_order/index.md"
      }
    ],
    "/zh-CN/javascript/": [
      {
        text: "Common Function",
        collapsed: true,
        items: [
          {
            text: "Dom Controls",
            link: "/zh-CN/javascript/regularcheck.md"
          },
          {
            text: "\u5E38\u7528\u51FD\u6570",
            link: "/zh-CN/javascript/shared.md"
          }
        ]
      }
    ],
    "/zh-CN/nginx/": [
      {
        text: "Nginx \u6307\u4EE4",
        collapsed: true,
        link: "/zh-CN/nginx/index.md"
      }
    ],
    "/zh-CN/flutter/": [
      {
        text: "components",
        collapsed: true,
        link: "/zh-CN/flutter/components.md"
      }
    ],
    "/zh-CN/mysql/": [
      {
        text: "SQL",
        collapsed: true,
        link: "/zh-CN/mysql/index.md"
      }
    ],
    "/zh-CN/Vue/": [
      {
        text: "vue",
        collapsed: true,
        link: "/zh-CN/Vue/vue.md"
      }
    ]
  };
};

// docs/.vitepress/sidebars/en-US.sidebar.ts
var getEnUSSidebar = () => {
  return {
    "/zh-CN/app/": [
      {
        text: "apiclound",
        collapsed: true,
        link: "/zh-CN/app/apiclound.md"
      }
    ],
    "/zh-CN/congshang/": [
      {
        text: "congshang \u5E38\u7528",
        collapsed: true,
        items: [
          {
            text: "congshang",
            link: "/zh-CN/congshang/congshang.md"
          },
          {
            text: "inno-setup\u914D\u7F6E",
            link: "/zh-CN/congshang/inno-setup.md"
          }
        ]
      }
    ],
    "/zh-CN/git_order/": [
      {
        text: "git \u6307\u4EE4",
        collapsed: true,
        link: "/zh-CN/git_order/index.md"
      }
    ],
    "/zh-CN/javascript/": [
      {
        text: "Common Function",
        collapsed: true,
        items: [
          {
            text: "Dom Controls",
            link: "/zh-CN/javascript/regularcheck.md"
          },
          {
            text: "\u5E38\u7528\u51FD\u6570",
            link: "/zh-CN/javascript/shared.md"
          }
        ]
      }
    ],
    "/zh-CN/nginx/": [
      {
        text: "Nginx \u6307\u4EE4",
        collapsed: true,
        link: "/zh-CN/nginx/index.md"
      }
    ]
  };
};

// docs/.vitepress/configs/zh-CN.config.ts
var zhCNConfig = {
  description: "Liud\u7684\u535A\u5BA2",
  title: "Liud",
  lang: "zh-CN",
  themeConfig: {
    // https://vitepress.dev/reference/default-theme-config
    darkModeSwitchLabel: "\u4E3B\u9898",
    docFooter: {
      prev: "\u4E0A\u4E00\u7BC7",
      next: "\u4E0B\u4E00\u7BC7"
    },
    lastUpdatedText: "\u6700\u540E\u66F4\u65B0",
    nav: getZhCNNav(),
    outline: {
      level: [2, 6],
      label: "\u76EE\u5F55"
    },
    returnToTopLabel: "\u8FD4\u56DE\u9876\u90E8",
    sidebarMenuLabel: "\u83DC\u5355",
    sidebar: getZhCNSidebar(),
    socialLinks: [
      { icon: "github", link: "https://github.com/liangchuying/vitepress-docs.git" }
    ]
  }
};

// docs/.vitepress/configs/en-US.config.ts
var enUSConfig = {
  description: "Liud\u7684\u535A\u5BA2",
  title: "Liud",
  lang: "en-US",
  themeConfig: {
    // https://vitepress.dev/reference/default-theme-config
    darkModeSwitchLabel: "Theme",
    docFooter: {
      prev: "Previous page",
      next: "Next page"
    },
    lastUpdatedText: "Last updated",
    nav: getEnUSNav(),
    outline: {
      level: [2, 6],
      label: "List"
    },
    returnToTopLabel: "Return to the top",
    sidebarMenuLabel: "Menu",
    sidebar: getEnUSSidebar(),
    socialLinks: [
      { icon: "github", link: "https://github.com/liangchuying/vitepress-docs.git" }
    ]
  }
};

// docs/.vitepress/base/docs.ts
var docsConfig = {
  base: "/vitepress-docs/",
  title: "Liud",
  description: "Liud\u7684\u535A\u5BA2",
  lang: "zh-CN",
  // lastUpdated: true, // 显示最新更新时间
  /* 语言配置 */
  locales: {
    // 若果配置了root，则双击title的时候不会返回/路径下了，只会返回在link路径下(第一次点击返回路径是en /zh)
    root: { label: "\u7B80\u4F53\u4E2D\u6587", lang: "zh-CN", link: "/zh-CN", ...zhCNConfig },
    // "zh-CN": {
    //     label: "简体中文",
    //     lang: "zh-CN",
    //     link: "/zh-CN", // index 直接跳转到首页
    //     ...zhCNConfig,
    // },
    "en-US": {
      label: "English",
      lang: "en-US",
      link: "/en-US",
      ...enUSConfig
    }
  }
};

// docs/.vitepress/base/head.ts
var head = [
  ["link", { rel: "icon", href: "/vitepress-docs/vitepress-logo-mini.png" }],
  ["meta", { name: "keywords", content: "Liud\u7684\u535A\u5BA2" }]
];

// docs/.vitepress/base/theme.ts
var themeConfig = {
  // https://vitepress.dev/reference/default-theme-config
  footer: {
    message: "Released under the MIT License.",
    copyright: "Copyright \xA9 2023-present Liud"
  },
  // logo
  logo: "/vitepress-logo-mini.png",
  // logo: "https://vuejs.org/images/logo.png",
  logoLink: "/vitepress-docs/index",
  // i18n路由，false切换首页，true内容切换
  i18nRouting: true,
  // 搜索配置（二选一）
  search: {
    // 本地离线搜索
    provider: "local",
    // 多语言搜索配置
    options: {
      locales: {
        /* 默认语言 */
        "zh-CN": {
          translations: {
            button: {
              buttonText: "\u641C\u7D22",
              buttonAriaLabel: "\u641C\u7D22\u6587\u6863"
            },
            modal: {
              displayDetails: "\u663E\u793A\u8BE6\u7EC6\u5217\u8868",
              noResultsText: "\u65E0\u6CD5\u627E\u5230\u76F8\u5173\u7ED3\u679C",
              resetButtonTitle: "\u6E05\u9664\u67E5\u8BE2\u7ED3\u679C",
              footer: {
                selectText: "\u9009\u62E9",
                navigateText: "\u5207\u6362",
                closeText: "\u5173\u95ED"
              }
            }
          }
        },
        "en-US": {
          translations: {
            button: {
              buttonText: "Search",
              buttonAriaLabel: "Search for Documents"
            },
            modal: {
              displayDetails: "Display detailed list",
              noResultsText: "Unable to find relevant results",
              resetButtonTitle: "Clear Query Results",
              footer: {
                selectText: "select",
                navigateText: "switch",
                closeText: "close"
              }
            }
          }
        }
      }
    }
  },
  editLink: {
    // 跳转编辑页面
    pattern: "https://github.com/liangchuying/vitepress-docs.git",
    text: "\u5728 GitHub \u4E0A\u7F16\u8F91\u6B64\u9875\u9762"
  },
  // 社交链接
  socialLinks: [
    { icon: "github", link: "https://github.com/liangchuying/vitepress-docs.git" }
  ]
};

// docs/.vitepress/config.mts
var config_default = defineConfig({
  /* 文档配置 */
  ...docsConfig,
  /* 标头配置 */
  head,
  /* 主题配置 */
  themeConfig
  // outDir: "../dist"
});
export {
  config_default as default
};
//# sourceMappingURL=data:application/json;base64,
